buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
 	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE")
		classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
		classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
		classpath 'com.bmuschko:gradle-docker-plugin:4.3.0'
		classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
		classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    	classpath "org.ajoberstar:grgit:2.2.1"
	}
}

ext {
    git = org.ajoberstar.grgit.Grgit.open(currentDir: file('.'))
}

ext['git.revision'] = ext.git.head().id
ext['git.revision.abbrev'] = ext.git.head().abbreviatedId

ext['docker.base.image'] = 'openjdk:8-jre-alpine'
ext['docker.maintainer'] = 'admin@sitewhere.com'

ext['sitewhere.grpc.api.version'] = '2.1.9'
ext['kafka.version'] = '2.0.0'
ext['zookeeper.version'] = '3.4.8'
ext['curator.version'] = '2.12.0'
ext['protobuf.version'] = '3.5.1'
ext['grpc.version'] = '1.21.0'
ext['guava.version'] = '27.1-jre'
ext['netty.version'] = '4.1.34.Final'
ext['groovy.version'] = '2.4.12'
ext['mongodb.version'] = '3.10.1'
ext['solr.version'] = '6.4.0'
ext['siddhi.version'] = '3.1.2'

apply plugin: 'distribution'

allprojects {
    group = 'com.sitewhere'
	version = '2.1.1'

    repositories {
        maven { url "https://repo.maven.apache.org/maven2" }
        maven { url 'https://maven.restlet.org' }
        maven { url "https://jitpack.io" }
        maven { url "https://oss.jfrog.org/artifactory/oss-release-local/" }
        maven { url "https://oss.sonatype.org/content/repositories/ksoap2-android-releases/" }
    	maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://maven.wso2.org/nexus/content/repositories/releases/" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		mavenLocal()
    }
}

subprojects {
	apply plugin: 'eclipse'

	apply plugin: "com.github.hierynomus.license"
	license {
		header rootProject.file('HEADER')
    	include "**/*.java"
	}

    // Use Spring dependency management.
 	apply plugin: 'io.spring.dependency-management'
	dependencyManagement {
		imports {
			mavenBom 'io.spring.platform:platform-bom:Cairo-SR1'
		}
	}

	// Use Docker plugin to allow for creating/pushing an image.
	apply plugin: 'com.bmuschko.docker-remote-api'

	// Allow Docker settings to be overridden by build environment.
	if (System.getenv("DOCKER_REGISTRY_URL") != null) registryUrl = System.getenv("DOCKER_REGISTRY_URL")
	if (System.getenv("DOCKER_REGISTRY_USERNAME") != null) registryUsername = System.getenv("DOCKER_REGISTRY_USERNAME")
	if (System.getenv("DOCKER_REGISTRY_PASSWORD") != null) registryPassword = System.getenv("DOCKER_REGISTRY_PASSWORD")
	if (System.getenv("DOCKER_REGISTRY_EMAIL") != null) registryEmail = System.getenv("DOCKER_REGISTRY_EMAIL")

	docker {
	    url = (System.getenv("DOCKER_HOST") != null) ? System.getenv("DOCKER_HOST") : dockerProtocol + '://' + dockerHostname + ':' + dockerPort
	    registryCredentials {
	        url = registryUrl
	        username = registryUsername
	        password = registryPassword
	        email = registryEmail
	    }
	}

 	// Choose Java settings.
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Common dependencies used for all projects.
    dependencies {
        testCompile group: 'junit', name: 'junit'
    }
}
